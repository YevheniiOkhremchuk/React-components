{"version":3,"sources":["image/man.png","image/woman.png","image/anonym.png","components/contact.js","components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","firstName","lastName","phone","gender","className","contacts","Contacts","state","search","handleSearchChange","e","setState","target","value","filter","el","toLowerCase","includes","src","man","alt","woman","anonym","this","onChange","placeholder","map","contact","i","setGender","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gMCe5BC,G,MAZC,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC3C,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QAAQJ,EAAvB,IAAmCC,GACnC,yBAAKG,UAAU,UAAUD,IAE7B,yBAAKC,UAAU,SAASF,M,gDCJ9BG,EAAW,CAAC,CACdL,UAAW,uCACXC,SAAU,2EACVC,MAAO,gBACPC,OAAQ,QACT,CACCH,UAAW,iCACXC,SAAU,+DACVC,MAAO,gBACPC,OAAQ,UACT,CACCH,UAAW,yDACXC,SAAU,mDACVC,MAAO,iBACR,CACCF,UAAW,iCACXC,SAAU,mDACVC,MAAO,gBACPC,OAAQ,UACT,CACCH,UAAW,uCACXC,SAAU,yDACVC,MAAO,gBACPC,OAAQ,QACT,CACCH,UAAW,uCACXC,SAAU,6CACVC,MAAO,gBACPC,OAAQ,SAqDOG,E,4MAjDfC,MAAQ,CACJF,SAAS,GAAD,OAAMA,GACdG,OAAQ,I,EAaZC,mBAAsB,SAACC,GACnB,EAAKC,SAAS,CAACH,OAAQE,EAAEE,OAAOC,QAEpC,EAAKF,SAAS,CACVN,SAAS,YAAKA,EAASS,QAAO,SAACC,GAC7B,OACEA,EAAGf,UAAUgB,cAAcC,SAASP,EAAEE,OAAOC,MAAMG,gBACnDD,EAAGd,SAASe,cAAcC,SAASP,EAAEE,OAAOC,MAAMG,gBAClDD,EAAGb,MAAMe,SAASP,EAAEE,OAAOC,c,wDAlBzBV,GACN,MAAe,SAAXA,EACK,yBAAKe,IAAKC,IAAKC,IAAI,QACN,WAAXjB,EACF,yBAAKe,IAAKG,IAAOD,IAAI,UAErB,yBAAKF,IAAKI,IAAQF,IAAI,a,+BAkBzB,IAAD,OACL,OACE,yBAAKhB,UAAU,YACb,yBAAKA,UAAU,mBACb,2BAAOS,MAAOU,KAAKhB,MAAMC,OAAQgB,SAAUD,KAAKd,mBAAmBgB,YAAY,2BAE/EF,KAAKhB,MAAMF,SAASqB,KAAI,SAACC,EAASC,GAAV,OACxB,kBAAC,EAAD,CACE5B,UAAW2B,EAAQ3B,UACnBC,SAAU0B,EAAQ1B,SAClBE,OAAQ,EAAK0B,UAAUF,EAAQxB,QAC/BD,MAAOyB,EAAQzB,MACf4B,IAAKF,Y,GA1CEG,aC5BRC,MANf,WACE,OACK,kBAAC,EAAD,OCOaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.161719c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man.6d61aca9.png\";","module.exports = __webpack_public_path__ + \"static/media/woman.a8023cdf.png\";","module.exports = __webpack_public_path__ + \"static/media/anonym.ab7f36c5.png\";","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Contact = ({ firstName, lastName, phone, gender }) => {\r\n    return (\r\n        <div className='Contact'>\r\n            <div className='first-name'>\r\n                <div className='name'>{firstName} {lastName}</div>\r\n                <div className='gender'>{gender}</div>\r\n            </div>\r\n            <div className='phone'>{phone}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport Contact from './contact';\r\nimport man from '../image/man.png';\r\nimport woman from '../image/woman.png';\r\nimport anonym from '../image/anonym.png';\r\n\r\nconst contacts = [{\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовський\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Робін\",\r\n    lastName: \"Щербатська\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Анонімний\",\r\n    lastName: \"Анонімус\",\r\n    phone: \"+380666666666\"\r\n}, {\r\n    firstName: \"Лілія\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Маршен\",\r\n    lastName: \"Еріксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбес\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n},];\r\n\r\nclass Contacts extends Component {\r\n    state = {\r\n        contacts: [...contacts],\r\n        search: '',\r\n      }\r\n\r\n    setGender(gender) {\r\n        if (gender === 'male') {\r\n          return <img src={man} alt='man'></img>;\r\n        } else if (gender === 'female') {\r\n          return <img src={woman} alt='woman'></img>;\r\n        } else {\r\n          return <img src={anonym} alt='anonym'></img>;\r\n        }\r\n      }\r\n\r\n    handleSearchChange  = (e) => {\r\n        this.setState({search: e.target.value})\r\n    \r\n    this.setState({\r\n        contacts: [...contacts.filter((el) => {\r\n          return (\r\n            el.firstName.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n            el.lastName.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n            el.phone.includes(e.target.value)\r\n            )\r\n          })]\r\n      })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className='contacts'>\r\n            <div className='search-contacts'>\r\n              <input value={this.state.search} onChange={this.handleSearchChange}placeholder='Search among contacts' />\r\n            </div>\r\n             {this.state.contacts.map((contact, i) => (\r\n              <Contact\r\n                firstName={contact.firstName}\r\n                lastName={contact.lastName}\r\n                gender={this.setGender(contact.gender)}\r\n                phone={contact.phone}\r\n                key={i} \r\n                />\r\n              ))}\r\n          </div>\r\n        );\r\n      }\r\n   }\r\n\r\n    export default Contacts;","import React from 'react';\nimport Contacts from './components/contacts';\n\nfunction App() {\n  return (\n       <Contacts />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}